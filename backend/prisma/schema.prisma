// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  password    String
  phoneNumber String   @unique
  email       String   @unique
  role        Role     @default(USER)
  confrmed    Boolean  @default(false)
  avatar      Picture? @relation(fields: [avatarId], references: [id])
  avatarId    Int?

  @@map("users")
}

model Picture {
  id    Int    @id @default(autoincrement())
  url   String @unique
  User  User[]
  Pet   Pet?   @relation(fields: [petId], references: [id])
  petId Int?

  @@map("pictures")
}

model ConfirmationCodes {
  id        Int                  @id @default(autoincrement())
  type      ConfirmationCodeType
  code      String
  createdAt DateTime             @default(now())
  expiresAt DateTime

  @@map("confirmation_codes")
}

model Region {
  id       Int      @id @default(autoincrement())
  name     String
  slug     String
  parentId Int?
  parent   Region?  @relation("RegionChildren", fields: [parentId], references: [id])
  children Region[] @relation("RegionChildren")
  Pet      Pet[]

  @@map("regions")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String
  parentId Int?
  parent   Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryChildren")
  Breed    Breed[]
  Pet      Pet[]

  @@map("categories")
}

model Breed {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  categoryId Int
  catogory   Category @relation(fields: [categoryId], references: [id])
  Pet        Pet[]

  @@map("breeds")
}

model Pet {
  id          Int       @id @default(autoincrement())
  age         Int
  sex         Sex
  weight      Int?
  sterilized  Boolean?
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  regionId    Int?
  region      Region?   @relation(fields: [regionId], references: [id])
  breedId     Int?
  breed       Breed?    @relation(fields: [breedId], references: [id])
  pictures    Picture[]
  description String

  @@map("pets")
}

enum Role {
  USER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

enum ConfirmationCodeType {
  REGISTRATION
  RECOVERING
}
